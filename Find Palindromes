import java.util.* ;
import java.io.*; 

public class Solution {
	public static int[] getPalindromes(int n) {
		ArrayList<Integer> res = new ArrayList<>();

		for(int i = 1; i <= n; i++){
			if(isPallindrom(i)){
				res.add(i);
			}
		}

		int ans[] = new int[res.size()];
		for(int i = 0; i < res.size(); i++){
			ans[i] = res.get(i);
		}
		return ans;
	}

	public static Boolean isPallindrom(int n){
		String str = Integer.toString(n);
		int left = 0, right = str.length() - 1;
		
		while(left < right){
			if(str.charAt(left++) != str.charAt(right--)){
			return false;
		}
		}
		return true;
	}
}


You are given an integer ‘N’. Your task is to find all palindromic numbers from 1 to ‘N’.
Palindromic integers are those integers that read the same backward or forwards.

Note:
Order of numbers should be in the non-decreasing matter.
For example:
You are given ‘N’ as 12, so the output should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], as all single-digit numbers are palindromic, and 11 is also a palindromic number.

T.C => O(N)
S.C => O(N)
