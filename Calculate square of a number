
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    public static int calculateSquare(int num) 
    {
        if(num < 0) num = -num;

        int result = 0;
        int x = num;

        for(int i = 0; i < 32; i++){
            if(((num >> i) & 1) == 1){
                result += (x << i);
            }
        }
        return result;
    }
}

Given an integer ‘N’, you are supposed to return the square of the given integer without using multiplication (*), division (/) or power function (pow()).

We loop over the bits of n.
For each bit position i:

If (n >> i) & 1 == 1 → that bit is set → we add (n << i) to the result.

If the bit is 0, we do nothing for that position.

Step 3: Apply it to 5 (binary 101)

i = 0 → (n >> 0) & 1 = 1 ✅ → add (5 << 0) = 5

i = 1 → (n >> 1) & 1 = 0 ❌ → skip

i = 2 → (n >> 2) & 1 = 1 ✅ → add (5 << 2) = 20

So contributions = 5 + 20 = 25.


T.C => O(N)
S.C => O(1)
